import asyncio
import logging
import dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
SUPPORT = os.getenv('SUPPORT')
MAX_AMOUNT = os.getenv('MAX_AMOUNT')
MIN_AMOUNT = os.getenv('MIN_AMOUNT')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å"),
            KeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏"),
        ],
        [
            KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"),
            KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ],
    ],
    resize_keyboard=True,
)


class DepositStates(StatesGroup):
    waiting_for_account = State()
    waiting_for_amount = State()
    waiting_for_receipt = State()


class WithdrawStates(StatesGroup):
    waiting_for_account = State()
    waiting_for_amount = State()
    waiting_for_requisites = State()
    waiting_for_code = State()


@dp.message(CommandStart())
async def start(message: types.Message):
    logger.info(f"User {message.from_user.id} started the bot.")
    await message.answer(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>Mm Pay</u>!</b>\n\n"
        "üíº <i>–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.</i>\n\n"
        "üîΩ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá\n\n"
        'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href="https://t.me/Mm_paysupport">@Mm_paysupport</a>',
        reply_markup=menu,
        parse_mode="HTML",
    )


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
@dp.message(Command("cancel"))
async def cancel(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} canceled an action.")
    await state.clear()
    await message.answer(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", parse_mode="HTML", reply_markup=menu
    )


@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@dp.message(Command("menu"))
async def main_menu(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} returned to main menu.")
    await state.clear()
    await message.answer(
        "<b>üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</u></b>\n\n"
        "üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è\n\n"
        'üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href="https://t.me/Mm_paysupport">@Mm_paysupport</a>',
        reply_markup=menu,
        parse_mode="HTML",
    )


# ====================
# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
# ====================
@dp.message(F.text == "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
@dp.message(Command("replenish"))
async def deposit_start(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started deposit process.")
    caption = (
        "<b>üì• <u>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞</u></b>\n\n"
        "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞</b> –∏–ª–∏ <b>ID</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n"
        "üìå –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
    )
    try:
        photo = FSInputFile("img/login_img.jpg")
        await message.answer_photo(
            photo=photo, caption=caption, parse_mode="HTML"
        )
    except FileNotFoundError:
        logger.warning("Image img/login_img.jpg not found.")
        await message.answer(caption, parse_mode="HTML")
    await state.set_state(DepositStates.waiting_for_account)


@dp.message(DepositStates.waiting_for_account)
async def deposit_account(message: types.Message, state: FSMContext):
    logger.info(
        f"User {message.from_user.id} entered deposit account: {message.text}"
    )
    await state.update_data(account=message.text)
    await message.answer(
        f"üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç {MIN_AMOUNT} –¥–æ {MAX_AMOUNT} —Å–æ–º):</b>",
        parse_mode="HTML",
    )
    await state.set_state(DepositStates.waiting_for_amount)


@dp.message(DepositStates.waiting_for_amount)
async def deposit_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0 or int(message.text) < {MIN_AMOUNT} or int(message.text) > {MAX_AMOUNT}:
        logger.warning(
            f"User {message.from_user.id} entered invalid deposit amount: {message.text}"
        )
        await message.answer(
            f"‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º {MIN_AMOUNT} –∏ –º–µ–Ω—å—à–µ —á–µ–º {MAX_AMOUNT}).", parse_mode="HTML"
        )
        return
    await state.update_data(amount=message.text)
    data = await state.get_data()
    logger.info(
        f"User {message.from_user.id} entered deposit amount: {data['amount']}"
    )
    amount = int(data["amount"])
    amount = amount * 100
    amount_w = f"{len(str(amount))}{amount}"
    caption = (
        "<b>üì≤ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +996 <code>779588011</code>\n\n"
        "üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Mbank:</b>\n"
        f"<a href='https://app.mbank.kg/qr/#00020101021132500012c2c.mbank.kg0102021012996779588011120211130211520499995303417540{amount_w}5908BELEK%20T.6304646a'>"
        "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>"
    )

    try:
        photo = FSInputFile("img/qr_codes/mbank_qr.jpg")
        await message.answer_photo(
            photo=photo, caption=caption, parse_mode="HTML"
        )
    except FileNotFoundError:
        logger.warning("Image img/qr_codes/mbank_qr.jpg not found.")
        await message.answer(caption, parse_mode="HTML")
    await message.answer(
        "üì∑<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞:</b>",
        parse_mode="HTML",
    )
    await state.set_state(DepositStates.waiting_for_receipt)


@dp.message(DepositStates.waiting_for_receipt, F.photo)
async def deposit_receipt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id
    logger.info(f"User {message.from_user.id} sent deposit receipt.")

    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"approve_deposit:{message.from_user.id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"decline_deposit:{message.from_user.id}",
                ),
            ]
        ]
    )

    text = (
        f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username or message.from_user.full_name} (ID: <code>{message.from_user.id}</code>)\n"
        f"üßæ <b>–°—á—ë—Ç/ID:</b> <code>{data.get('account')}</code>\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {data.get('amount')} —Å–æ–º\n"
        f"üìå <b>–ó–∞—è–≤–∫–∞ ‚Ññ{data.get('account')}</b>\n\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é."
    )

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=text + "\n\n–û–∂–∏–¥–∞–Ω–∏–µ....",
        parse_mode="HTML",
        reply_markup=None,
    )
    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=photo_id,
        caption=text,
        parse_mode="HTML",
        reply_markup=inline_kb,
    )
    await message.answer(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\nüõü SUPPORT: "
        + SUPPORT,
        parse_mode="HTML",
    )
    await state.clear()


@dp.callback_query(F.data.startswith("approve_deposit:"))
async def approve_deposit(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    logger.info(f"Admin approved deposit for user {user_id}.")
    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        await bot.send_message(
            chat_id=ADMIN_ID,
            text="‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        # –†–∞–±–æ—Ç–∞–µ–º —Å caption –∏ edit_caption
        caption = call.message.caption or ""
        await call.message.edit_caption(
            caption + "\n\n‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.</b>",
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
    except Exception as e:
        logger.error(f"Error sending deposit approval message: {e}")
        await call.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", show_alert=True
        )


@dp.callback_query(F.data.startswith("decline_deposit:"))
async def decline_deposit(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    logger.info(f"Admin declined deposit for user {user_id}.")
    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>",
            parse_mode="HTML",
        )
        await bot.send_message(
            chat_id=ADMIN_ID,
            text="‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>",
            parse_mode="HTML",
        )
        caption = call.message.caption or ""
        await call.message.edit_caption(
            caption + "\n\n‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>",
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
    except Exception as e:
        logger.error(f"Error sending deposit decline message: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞: {e}", show_alert=True)


# ====================
# –í—ã–≤–æ–¥
# ====================
@dp.message(F.text == "üì§ –í—ã–≤–µ—Å—Ç–∏")
@dp.message(Command("withdraw"))
async def withdraw_start(message: types.Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started withdraw process.")
    caption = (
        "<b>üì§ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –∏–ª–∏ ID, –∏–∑ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞."
    )
    try:
        photo = FSInputFile("img/login_img.jpg")
        await message.answer_photo(
            photo=photo, caption=caption, parse_mode="HTML"
        )
    except FileNotFoundError:
        logger.warning("Image img/login_img.jpg not found.")
        await message.answer(caption, parse_mode="HTML")
    await state.set_state(WithdrawStates.waiting_for_account)


@dp.message(WithdrawStates.waiting_for_account)
async def withdraw_account(message: types.Message, state: FSMContext):
    logger.info(
        f"User {message.from_user.id} entered withdraw account: {message.text}"
    )
    await state.update_data(account=message.text)
    await message.answer(
        "üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–æ—Ç 150 –¥–æ {MAX_AMOUNT} —Å–æ–º):</b>",
        parse_mode="HTML",
    )
    await state.set_state(WithdrawStates.waiting_for_amount)


@dp.message(WithdrawStates.waiting_for_amount)
async def withdraw_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        logger.warning(
            f"User {message.from_user.id} entered invalid withdraw amount: {message.text}"
        )
        await message.answer(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.", parse_mode="HTML"
        )
        return
    amount = int(message.text)
    if amount < 50 or amount > 45000:
        logger.warning(
            f"User {message.from_user.id} entered withdraw amount out of range: {amount}"
        )
        await message.answer(
            "‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 50 –¥–æ 45000 —Å–æ–º.", parse_mode="HTML"
        )
        return
    await state.update_data(amount=message.text)
    logger.info(
        f"User {message.from_user.id} entered withdraw amount: {amount}"
    )
    await message.answer(
        "üí≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å—á—ë—Ç–∞ –∏ —Ç.–¥.):</b>\n"
        "üìå –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.\n"
        "üìå –û–±—Ä–∞–∑–µ—Ü: +996702388466 –º–±–∞–Ω–∫",
        parse_mode="HTML",
    )
    await state.set_state(WithdrawStates.waiting_for_requisites)


@dp.message(WithdrawStates.waiting_for_requisites)
async def withdraw_requisites(message: types.Message, state: FSMContext):
    logger.info(
        f"User {message.from_user.id} entered withdraw requisites: {message.text}"
    )
    await state.update_data(requisites=message.text)

    await message.answer(
        f"""<b>üì§ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–≤–æ–¥—É:</b>\n
üìç–ó–∞—Ö–æ–¥–∏–ºüëá
    üìç1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏!
    üìç2. –í—ã–≤–µ—Å—Ç–∏ —Å–æ —Å—á–µ—Ç–∞!
    üìç3. –ù–∞–ª–∏—á–Ω—ã–µ
    üìç4. –°—É–º–º—É –¥–ª—è –í—ã–≤–æ–¥–∞!
–ì–æ—Ä–æ–¥: –ë–∞—Ç–∫–µ–Ω
–£–ª–∏—Ü–∞: Mm Pay (24/7)
    üìç5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    üìç6. –ü–æ–ª—É—á–∏—Ç—å –ö–æ–¥!
    üìç7. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–º
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã üëá
üíª –û–ø–µ—Ä–∞—Ç–æ—Ä: {SUPPORT}
        """,
        parse_mode="HTML",
    )

    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ")
    await state.set_state(WithdrawStates.waiting_for_code)


@dp.message(WithdrawStates.waiting_for_code)
async def withdraw_code(message: types.Message, state: FSMContext):
    await state.update_data(code=message.text)
    data = await state.get_data()

    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"approve_withdraw:{message.from_user.id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"decline_withdraw:{message.from_user.id}",
                ),
            ]
        ]
    )

    text = (
        f"<b>üì§ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username or message.from_user.full_name} (ID: <code>{message.from_user.id}</code>)\n"
        f"üßæ <b>–°—á—ë—Ç/ID:</b> <code>{data.get('account')}</code>\n"
        f"‚úÖ <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:</b> {data.get('code')}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {data.get('amount')} —Å–æ–º\n"
        f"üìå <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {data.get('requisites')}\n\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é."
    )

    await bot.send_message(
        chat_id=ADMIN_ID, text=text, parse_mode="HTML", reply_markup=inline_kb
    )

    await message.answer(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!</b>\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\nüõü SUPPORT: "
        + SUPPORT,
        parse_mode="HTML",
    )
    await state.clear()


@dp.callback_query(F.data.startswith("approve_withdraw:"))
async def approve_withdraw(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    logger.info(f"Admin approved withdraw for user {user_id}.")

    if (
        "–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" in call.message.text
        or "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" in call.message.text
    ):
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>",
            parse_mode="HTML",
        )
        await call.message.edit_text(
            call.message.text + "\n\n‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.</b>",
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
    except Exception as e:
        logger.error(f"Error sending withdraw approval message: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query(F.data.startswith("decline_withdraw:"))
async def decline_withdraw(call: types.CallbackQuery):
    user_id = int(call.data.split(":")[1])
    logger.info(f"Admin declined withdraw for user {user_id}.")

    if (
        "–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" in call.message.text
        or "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" in call.message.text
    ):
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        return

    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>",
            parse_mode="HTML",
        )
        await call.message.edit_text(
            call.message.text + "\n\n‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>",
            parse_mode="HTML",
            reply_markup=None,
        )
        await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
    except Exception as e:
        logger.error(f"Error sending withdraw decline message: {e}")
        await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)



if __name__ == "__main__":
    logger.info("Bot started")
    asyncio.run(dp.start_polling(bot))
